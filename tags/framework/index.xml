<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Framework on Teopeurt&#39;s Blog</title>
    <link>http://blog.teopeurt.com/tags/framework/</link>
    <description>Recent content in Framework on Teopeurt&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Aug 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.teopeurt.com/tags/framework/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What is QT on Android?</title>
      <link>http://blog.teopeurt.com/2012/08/16/android-and-qt/</link>
      <pubDate>Thu, 16 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.teopeurt.com/2012/08/16/android-and-qt/</guid>
      <description>&lt;p&gt;Do you want to port those brilliant Nokia applications and QT based apps to Android without rewriting your code or having to learn what a Java Interface is? Necessitas to the rescue! - though you still have to learn Java if you want to be serious on the Android, but I digress.&lt;/p&gt;

&lt;p&gt;Necessitas allows you port and write QT based applications for Android. For those who are familiar with QT - it is/was the best C++ framework ever invented - opinions clearly my own.&lt;/p&gt;

&lt;p&gt;Look &lt;a href=&#34;http://necessitas.kde.org/&#34;&gt;here&lt;/a&gt; for good introduction and the &lt;a href=&#34;http://community.kde.org/Necessitas&#34;&gt;community&lt;/a&gt; if you want to tinker.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Necessitas is a KDE community project aimed to provide an easy way to develop Qt apps on Android platform.
Necessitas comes from the need of exploiting the power and the multi-platform capabilities of the Qt  framework on the Android world. It was born as a concept work which demonstrates the flexibility of Qt and, today, strives to become a fully  working development solution for Android.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was the brainchild of 31 year old Romanian Bogdan Vatra. He did an interview with &lt;a href=&#34;http://www.behindkde.org/node/925&#34;&gt;Behind KDE&lt;/a&gt;. His introduction to the Android platform SDK was similar to mine - doing custom Android builds on embedded devices, though mine was at TomTom and Renault. Here is an excerpt of how he started work on Necessitas.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;How old is the Qt on Android project?  Who started it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started to port Qt to Android at the end of 2009. When I started it the name was android-lighthouse but I had to change the name to &amp;ldquo;Necessitas&amp;rdquo; just before the SDK release because Nokia and Google didn&amp;rsquo;t allow me to use Qt and/or Android words.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://labs.qt.nokia.com/&#34;&gt;Lighthouse&lt;/a&gt;, a research project started by Nokia, helped me a lot. This project made my life very easy, the changes I had to make were only a small set of changes into the Qt tree. The &amp;ldquo;biggest change&amp;rdquo; was to add another shared memory implementation based on ashmem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post is part of a series of post on QT. I will actually go through the steps for creating an android application using the brilliant QT Quick and &lt;a href=&#34;http://qt.nokia.com/qtquick/&#34;&gt;QML&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Not to Hack the Android Framework</title>
      <link>http://blog.teopeurt.com/2011/06/22/hacking-android-framework/</link>
      <pubDate>Wed, 22 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://blog.teopeurt.com/2011/06/22/hacking-android-framework/</guid>
      <description>&lt;p class=&#34;meta&#34;&gt;22 June 2011 - Amsterdam&lt;/p&gt;

&lt;p&gt;This is a short dump of my notes to a customer who hacked the Android framework to create a custom build for their project. The resulting system was unstable and my job was to find out why (and fix it).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Comparing a stock android emulator (both 2.2 and 2.3), we see comparable values for highly graphic intensive apps.&lt;/p&gt;

&lt;p&gt;The difference in system-server could be down to our additions and the amount of processes - for each process needs to
communicate it&amp;rsquo;s state and activities to system_server (package manager, activity manager etc, ContentProvider resolver), the more the process, the more
the messages as the framework need to know which activities, services, providers and broadcast is running.&lt;/p&gt;

&lt;p&gt;I have instrumented the framework and could not find any extra  messages due to increased CotentProvider usages or broadcast recievers, although I can now track the message to the actual package/classs
the quantity/frequencty was sufficiently low.&lt;/p&gt;

&lt;p&gt;system_server crashes because it has run out of FD(file descriptors!).&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>